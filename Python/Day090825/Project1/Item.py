from abc import ABC, abstractmethod
class Item(ABC):
    def __init__(self,title,author):
        self.title= title
        self.author= author
        self.__available = True  # Private attribute - Encapsulation
        self._borrowed_date = None  # Protected attribute
        # ENCAPSULATION - Thu·ªôc t√≠nh ƒë∆∞·ª£c b·∫£o v·ªá
    @property
    def available(self):
        """Getter ƒë·ªÉ truy c·∫≠p tr·∫°ng th√°i available"""
        return self.__available
    
    def borrow(self):
        """
        Ph∆∞∆°ng th·ª©c m∆∞·ª£n s√°ch - thay ƒë·ªïi tr·∫°ng th√°i available m·ªôt c√°ch an to√†n
        
        Returns:
            bool: True n·∫øu m∆∞·ª£n th√†nh c√¥ng, False n·∫øu s√°ch ƒë√£ ƒë∆∞·ª£c m∆∞·ª£n
        """
        if self.__available:
            self.__available = False
            self._borrowed_date = datetime.now()
            print(f"‚úÖ M∆∞·ª£n s√°ch th√†nh c√¥ng: '{self.title}'")
            print(f"   Ng√†y m∆∞·ª£n: {self._borrowed_date.strftime('%d/%m/%Y %H:%M')}")
            return True
        else:
            print(f"‚ùå Kh√¥ng th·ªÉ m∆∞·ª£n: '{self.title}' ƒë√£ ƒë∆∞·ª£c m∆∞·ª£n")
            return False
    
    def return_item(self):
        """
        Ph∆∞∆°ng th·ª©c tr·∫£ s√°ch - thay ƒë·ªïi tr·∫°ng th√°i available m·ªôt c√°ch an to√†n
        
        Returns:
            bool: True n·∫øu tr·∫£ th√†nh c√¥ng, False n·∫øu s√°ch ch∆∞a ƒë∆∞·ª£c m∆∞·ª£n
        """
        if not self.__available:
            self.__available = True
            returned_date = datetime.now()
            if self._borrowed_date:
                days_borrowed = (returned_date - self._borrowed_date).days
                print(f"‚úÖ Tr·∫£ s√°ch th√†nh c√¥ng: '{self.title}'")
                print(f"   Ng√†y tr·∫£: {returned_date.strftime('%d/%m/%Y %H:%M')}")
                print(f"   S·ªë ng√†y m∆∞·ª£n: {days_borrowed} ng√†y")
            else:
                print(f"‚úÖ Tr·∫£ s√°ch th√†nh c√¥ng: '{self.title}'")
            self._borrowed_date = None
            return True
        else:
            print(f"‚ùå Kh√¥ng th·ªÉ tr·∫£: '{self.title}' ch∆∞a ƒë∆∞·ª£c m∆∞·ª£n")
            return False
    
    def get_status(self):
        """Tr·∫£ v·ªÅ tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa s√°ch"""
        return "üìó C√≥ s·∫µn" if self.__available else "üìï ƒê√£ ƒë∆∞·ª£c m∆∞·ª£n"
    
    # ABSTRACTION - Ph∆∞∆°ng th·ª©c tr·ª´u t∆∞·ª£ng
    @abstractmethod
    def display_info(self):
        """
        Ph∆∞∆°ng th·ª©c tr·ª´u t∆∞·ª£ng hi·ªÉn th·ªã th√¥ng tin s√°ch
        Ph·∫£i ƒë∆∞·ª£c tri·ªÉn khai b·ªüi c√°c l·ªõp con
        """
        pass
